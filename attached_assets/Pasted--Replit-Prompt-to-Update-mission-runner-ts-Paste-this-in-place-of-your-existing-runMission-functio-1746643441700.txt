üîß Replit Prompt to Update mission-runner.ts
Paste this in place of your existing runMission function inside server/backend/mission-runner.ts:

ts
Copy
Edit
import axios from "axios";
import { getRobotSecretKey, getRobotUrl } from "../robot-constants";
import { RobotTaskRequest } from "../types";

export async function runMission(request: RobotTaskRequest, pointsFromUI?: any[]) {
  const { uiMode, shelfId } = request;
  const robotURL = getRobotUrl();
  const secret = getRobotSecretKey();

  console.log("üîß Running mission with:", { uiMode, shelfId });

  // 1. Fetch map and points
  const mapRes = await axios.get(`${robotURL}/maps/`, {
    headers: { "x-api-key": secret },
  });
  const maps = mapRes.data;
  const activeMap = maps?.[0]; // use the only map or default
  if (!activeMap) throw new Error("No maps found on robot");

  const mapId = activeMap.id;
  const mapDetail = await axios.get(`${robotURL}/maps/${mapId}`, {
    headers: { "x-api-key": secret },
  });

  const overlays = Array.isArray(mapDetail.data.overlays) ? mapDetail.data.overlays : [];
  const points = overlays.map((o: any) => o.point).filter(Boolean);

  const normalized = (str: string) => String(str).trim().toLowerCase();

  const shelf = points.find(p => normalized(p.id) === normalized(shelfId));
  const pickup = points.find(p => normalized(p.id).includes("pick"));
  const dropoff = points.find(p => normalized(p.id).includes("drop"));
  const standby = points.find(p => normalized(p.id).includes("desk") || normalized(p.id).includes("standby"));

  if (!shelf) throw new Error(`‚ùå Shelf point "${shelfId}" not found`);
  if (!pickup) throw new Error(`‚ùå Pickup point not found`);
  if (!dropoff) throw new Error(`‚ùå Dropoff point not found`);
  if (!standby) throw new Error(`‚ùå Standby point not found`);

  // 2. Build path list based on uiMode
  const pathList =
    uiMode === "pickup"
      ? [pickup.id, shelf.id, standby.id]
      : [shelf.id, dropoff.id, standby.id];

  // 3. Create task
  const createTaskRes = await axios.post(
    `${robotURL}/tasks`,
    {
      name: `AutoTask_${Date.now()}`,
      map_id: mapId,
      path: pathList,
    },
    { headers: { "x-api-key": secret } }
  );

  const taskId = createTaskRes.data?.id;
  if (!taskId) throw new Error("‚ùå Failed to create task");

  // 4. Run task
  const execRes = await axios.post(
    `${robotURL}/tasks/${taskId}/execute`,
    {},
    { headers: { "x-api-key": secret } }
  );

  return { taskId, status: execRes.status, message: "‚úÖ Mission launched" };
}