✅ Backend File: server.ts (Put at root or in /server folder)
ts
Copy
Edit
// server.ts
import express from "express";
import axios from "axios";
import dotenv from "dotenv";
dotenv.config();

const app = express();
app.use(express.json());

const ROBOT_IP = process.env.ROBOT_IP;
const ROBOT_SECRET_KEY = process.env.ROBOT_SECRET_KEY;

const axiosConfig = {
  headers: { "x-api-key": ROBOT_SECRET_KEY },
};

// Fetch and classify points
async function getMapPoints() {
  const url = `http://${ROBOT_IP}:8090/maps/current_map/points`;
  const res = await axios.get(url, axiosConfig);
  return res.data.points;
}

function classifyPoints(points: any[]) {
  const categories = {
    pickup: null,
    dropoff: null,
    standby: null,
    shelves: [] as any[],
  };

  for (const p of points) {
    const label = p.id.toLowerCase();
    if (label.includes("pick")) categories.pickup = p;
    else if (label.includes("drop")) categories.dropoff = p;
    else if (label.includes("desk")) categories.standby = p;
    else categories.shelves.push(p);
  }

  return categories;
}

async function moveToPoint(pointId: string) {
  const url = `http://${ROBOT_IP}:8090/chassis/move_to_point`;
  await axios.post(
    url,
    { point_id: pointId, creator: "backend-system" },
    axiosConfig
  );
}

function wait(ms: number) {
  return new Promise((res) => setTimeout(res, ms));
}

// === Routes ===

app.get("/api/fetch-points", async (req, res) => {
  try {
    const points = await getMapPoints();
    res.json({ points });
  } catch (err: any) {
    console.error(err.message);
    res.status(500).json({ error: "Could not fetch points." });
  }
});

app.post("/api/robot-task", async (req, res) => {
  const { mode, shelfId } = req.body;

  try {
    const points = await getMapPoints();
    const { pickup, dropoff, standby, shelves } = classifyPoints(points);

    const shelf = shelves.find((p) => p.id === shelfId);
    if (!shelf) throw new Error("Shelf point not found");

    if (mode === "dropoff") {
      await moveToPoint(pickup.id);
      console.log(`📦 Picked up at ${pickup.id}`);
      await wait(4000);

      await moveToPoint(shelf.id);
      console.log(`🚚 Dropped off at shelf ${shelf.id}`);
      await wait(4000);
    }

    if (mode === "pickup") {
      await moveToPoint(shelf.id);
      console.log(`📦 Picked up from shelf ${shelf.id}`);
      await wait(4000);

      await moveToPoint(dropoff.id);
      console.log(`🚚 Dropped at ${dropoff.id}`);
      await wait(4000);
    }

    if (standby) {
      await moveToPoint(standby.id);
      console.log(`🛑 Returned to standby: ${standby.id}`);
    }

    res.json({ success: true });
  } catch (err: any) {
    console.error("❌", err.message);
    res.status(500).json({ success: false, error: err.message });
  }
});

app.listen(3000, () => console.log("🚀 Server ready at http://localhost:3000"));
🧪 Replit Secrets to Set
In Replit’s “Secrets” tab (env variables):

ini
Copy
Edit
ROBOT_SECRET_KEY=your-real-key-here
ROBOT_IP=192.168.4.31