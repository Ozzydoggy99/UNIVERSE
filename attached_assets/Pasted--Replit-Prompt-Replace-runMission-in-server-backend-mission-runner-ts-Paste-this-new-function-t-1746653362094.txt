üß© Replit Prompt: Replace runMission() in server/backend/mission-runner.ts
Paste this new function that performs multi-stage movements based on uiMode.

ts
Copy
Edit
// server/backend/mission-runner.ts
import axios from "axios";
import { ROBOT_API_URL, ROBOT_SECRET } from "../robot-constants";
import { fetchRobotMapPoints as fetchPoints } from "../robot-points-api";
import { Point, RobotTaskRequest } from "../types";

function normalize(id: string | number) {
  return String(id).trim().toLowerCase();
}

async function sendMoveTo(point: Point) {
  const movePayload = {
    action: "move_to",
    target_x: point.x,
    target_y: point.y,
  };

  const response = await axios.post(`${ROBOT_API_URL}/chassis/moves`, movePayload, {
    headers: { "x-api-key": ROBOT_SECRET },
  });

  return response.data;
}

export async function runMission({ shelfId, uiMode, points }: RobotTaskRequest) {
  if (!points || points.length === 0) {
    console.log("No points provided, fetching from robot...");
    points = await fetchPoints();
  }

  console.log(`üßæ Starting mission: ${uiMode} to shelf ${shelfId}`);
  const shelf = points.find(p => normalize(p.id) === normalize(shelfId));
  const dropoff = points.find(p => normalize(p.id) === "drop-off");
  const pickup = points.find(p => normalize(p.id) === "pick-up");
  const standby = points.find(p => normalize(p.id) === "desk");

  if (!shelf || !dropoff || !pickup || !standby) {
    throw new Error("‚ùå Required point(s) not found (shelf/drop-off/pick-up/desk)");
  }

  const steps = [];

  if (uiMode === "pickup") {
    steps.push(shelf);     // go to shelf
    steps.push(dropoff);   // deliver to drop-off
  } else {
    steps.push(standby);   // start from standby
    steps.push(pickup);    // get bin from pick-up
    steps.push(shelf);     // deliver to shelf
  }

  steps.push(standby);     // return to standby

  const executed = [];

  for (const point of steps) {
    console.log(`‚û°Ô∏è Moving to ${point.id}...`);
    const result = await sendMoveTo(point);
    executed.push({ to: point.id, moveId: result.id });
  }

  return {
    mission: `${uiMode}-${shelfId}-${Date.now()}`,
    status: "complete",
    executed,
  };
}
‚úÖ What This Fixes
UI stays simple (just passes pickup or dropoff + shelfId)

Backend:

Determines all points: shelf, pickup, dropoff, standby

Executes them in multi-step order

Logs and returns each move ID