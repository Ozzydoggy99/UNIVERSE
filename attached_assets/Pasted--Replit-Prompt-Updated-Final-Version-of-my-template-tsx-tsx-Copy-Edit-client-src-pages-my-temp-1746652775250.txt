ðŸ§© Replit Prompt: Updated Final Version of my-template.tsx
tsx
Copy
Edit
// client/src/pages/my-template.tsx
import { useState } from "react";
import { useSimplifiedRobotTask } from "@/hooks/use-simplified-robot-task";
import { LogOut } from "lucide-react";
import { useAuth } from "@/hooks/use-auth";

export default function MyTemplate() {
  const { user, logoutMutation } = useAuth();
  const {
    mode,
    setMode,
    pointsByFloor,
    selectedPointId,
    setSelectedPointId,
    runTask,
    status,
    error,
    isRunning
  } = useSimplifiedRobotTask();

  const [step, setStep] = useState<"service" | "mode" | "floor" | "shelf" | "confirm">("service");
  const [selectedService, setSelectedService] = useState<"Laundry" | "Trash" | null>(null);
  const [selectedFloor, setSelectedFloor] = useState<string | null>(null);

  const floorColors: Record<string, string> = {
    "1": "bg-red-600",
    "2": "bg-green-600",
    "3": "bg-blue-500",
    "4": "bg-yellow-500",
  };

  // Hide any system-reserved points regardless of label casing
  const systemPoints = ["pick-up", "drop-off", "desk", "charging station"];

  const handleConfirm = async () => {
    if (!selectedPointId || isRunning) return;
    await runTask(mode, selectedPointId);
    setStep("service");
    setSelectedFloor(null);
    setSelectedPointId(null);
  };

  return (
    <div className="p-4 min-h-screen bg-white text-black">
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-2xl font-bold">Robot Service</h1>
        <div className="flex items-center gap-2">
          <span>{user?.username || "User"}</span>
          <button onClick={() => logoutMutation.mutate()}>
            <LogOut className="w-5 h-5 text-red-600" />
          </button>
        </div>
      </div>

      {status && <div className="mb-4 p-3 bg-blue-100 text-blue-800 rounded">{status}</div>}
      {error && <div className="mb-4 p-3 bg-red-100 text-red-800 rounded">{error}</div>}

      {step === "service" && (
        <div className="flex flex-col gap-4 items-center mt-10">
          <button onClick={() => { setSelectedService("Laundry"); setStep("mode"); }} className="bg-green-600 text-white p-6 text-2xl rounded-lg w-60 shadow">Laundry</button>
          <button onClick={() => { setSelectedService("Trash"); setStep("mode"); }} className="bg-blue-700 text-white p-6 text-2xl rounded-lg w-60 shadow">Trash</button>
        </div>
      )}

      {step === "mode" && (
        <div className="flex flex-col items-center gap-6">
          <h2 className="text-xl font-semibold mb-4">{selectedService} Service</h2>
          <button onClick={() => { setMode("pickup"); setStep("floor"); }} className="bg-white border border-black text-black text-xl px-8 py-3 rounded shadow">Pickup</button>
          <button onClick={() => { setMode("dropoff"); setStep("floor"); }} className="bg-black text-white text-xl px-8 py-3 rounded shadow">Dropoff</button>
        </div>
      )}

      {step === "floor" && (
        <div>
          <h2 className="text-xl font-semibold mb-4">{mode === "pickup" ? "Pickup" : "Dropoff"} - Select Floor</h2>
          <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
            {Object.keys(pointsByFloor).map(floorId => (
              <button
                key={floorId}
                className={`${floorColors[floorId] || "bg-gray-300"} text-white text-2xl p-6 rounded shadow`}
                onClick={() => {
                  setSelectedFloor(floorId);
                  setStep("shelf");
                }}
              >
                {floorId}
              </button>
            ))}
          </div>
        </div>
      )}

      {step === "shelf" && selectedFloor && (
        <div>
          <h2 className="text-xl font-semibold mb-4">Select Shelf Point on Floor {selectedFloor}</h2>
          <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
            {(pointsByFloor[selectedFloor] || [])
              .filter(p => !systemPoints.includes(p.id.toLowerCase()))
              .map(point => (
                <button
                  key={point.id}
                  onClick={() => { setSelectedPointId(point.id); setStep("confirm"); }}
                  className={`p-5 text-xl rounded shadow ${selectedPointId === point.id ? "bg-green-500 text-white" : "bg-black text-white"}`}
                >
                  {point.id}
                </button>
              ))}
          </div>
        </div>
      )}

      {step === "confirm" && selectedPointId && (
        <div className="flex flex-col items-center mt-10 gap-4">
          <p className="text-xl">Confirm destination: <strong>{selectedPointId}</strong></p>
          <button onClick={handleConfirm} className="bg-green-600 text-white px-6 py-3 text-xl rounded shadow">
            âœ… Confirm Selection
          </button>
        </div>
      )}

      <div className="fixed bottom-4 right-4">
        <button className="bg-violet-600 text-white px-4 py-2 rounded">View Static Map (No HMR)</button>
      </div>
    </div>
  );
}
âœ… This version:

Works with your corrected backend

Filters out all internal points (confirmed by your screenshot)

Matches your step-based UI flow

Fully ready to send multi-stage pickup/dropoff commands to the robot