âœ… ðŸ”§ REPLIT FIX PROMPT: Live Robot Position via WebSocket (With Real IP)
Problem:
The WebSocket connection for the robotâ€™s live position fails when using window.location.host, because your Replit frontend is not hosted on the same LAN as the robot.

According to the AXBot API, live position must be retrieved from:

bash
Copy
Edit
ws://<ROBOT_IP>/websocket/robot/{serial}/pose
âœ… OBJECTIVE:
Connect to the robot at 192.168.4.31 using WebSocket

Automatically reconnect if the connection drops

Pass the live position to your UI for rendering

ðŸ§© STEP: REPLACE FILE
Replace the contents of
client/src/hooks/use-robot-pose-websocket.ts
with the following:

tsx
Copy
Edit
import { useEffect, useState, useRef } from "react";

interface Position {
  x: number;
  y: number;
  theta: number;
  orientation?: {
    x: number;
    y: number;
    z: number;
    w: number;
  };
  z?: number;
  timestamp?: number;
}

export function useRobotPoseWebSocket(robotSerial: string): Position | null {
  const [position, setPosition] = useState<Position | null>(null);
  const socketRef = useRef<WebSocket | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    if (!robotSerial) return;

    let isMounted = true;

    const connect = () => {
      // ðŸ‘‡ Your actual robot IP is hardcoded here for local testing
      const wsUrl = `ws://192.168.4.31/websocket/robot/${robotSerial}/pose`;

      try {
        socketRef.current = new WebSocket(wsUrl);

        socketRef.current.onopen = () => {
          console.log("[WebSocket] Connected to robot pose stream");
        };

        socketRef.current.onmessage = (event) => {
          try {
            const data = JSON.parse(event.data);
            if (data && typeof data.x === "number" && typeof data.y === "number") {
              if (isMounted) {
                setPosition(data);
              }
            }
          } catch (err) {
            console.error("Failed to parse pose message:", err);
          }
        };

        socketRef.current.onerror = (err) => {
          console.error("WebSocket error:", err);
        };

        socketRef.current.onclose = () => {
          console.warn("[WebSocket] Connection closed. Reconnecting in 3s...");
          if (reconnectTimeoutRef.current) clearTimeout(reconnectTimeoutRef.current);
          reconnectTimeoutRef.current = setTimeout(() => {
            if (isMounted) connect();
          }, 3000);
        };
      } catch (err) {
        console.error("WebSocket connection failed:", err);
      }
    };

    connect();

    return () => {
      isMounted = false;
      if (socketRef.current) socketRef.current.close();
      if (reconnectTimeoutRef.current) clearTimeout(reconnectTimeoutRef.current);
    };
  }, [robotSerial]);

  return position;
}