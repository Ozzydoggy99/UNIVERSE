‚úÖ 1. client/src/pages/my-template.tsx
This is the new UI screen that fully replaces the current /my-template route.

tsx
Copy
Edit
// client/src/pages/my-template.tsx
import { useEffect, useState } from "react";

type Point = { id: string };

export default function MyTemplate() {
  const [mode, setMode] = useState<"pickup" | "dropoff">("pickup");
  const [floorMap, setFloorMap] = useState<Record<string, Point[]>>({});
  const [selectedFloor, setSelectedFloor] = useState<string | null>(null);
  const [selectedShelf, setSelectedShelf] = useState<string | null>(null);
  const [status, setStatus] = useState<string | null>(null);

  const username = "User"; // TODO: Replace with actual logged-in user context

  useEffect(() => {
    async function fetchPoints() {
      const res = await fetch("/api/fetch-points");
      const data = await res.json();

      const floorBuckets: Record<string, Point[]> = {};

      for (const point of data.points) {
        const id = point.id.toLowerCase();
        if (id.includes("pick") || id.includes("drop") || id.includes("desk")) continue;

        const floor = point.id.slice(0, 1); // e.g. "2" from "245"
        if (!floorBuckets[floor]) floorBuckets[floor] = [];
        floorBuckets[floor].push(point);
      }

      setFloorMap(floorBuckets);
    }

    fetchPoints();
  }, []);

  const handleGo = async () => {
    if (!selectedShelf) return;
    setStatus("Running...");

    const res = await fetch("/api/robot-task", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ mode, shelfId: selectedShelf })
    });

    const result = await res.json();
    setStatus(result.success ? "‚úÖ Task complete" : `‚ùå Failed: ${result.error}`);
  };

  const floorColor = (floor: string) => {
    const colors: Record<string, string> = {
      "1": "#ff4d4f", // red
      "2": "#52c41a", // green
      "3": "#1890ff", // blue
    };
    return colors[floor] || "#888";
  };

  return (
    <div style={{ padding: 20, fontFamily: "sans-serif" }}>
      {/* Top bar */}
      <div style={{ display: "flex", justifyContent: "space-between", marginBottom: 10 }}>
        <div>
          <strong>Service:</strong>{" "}
          <button onClick={() => setMode("pickup")}>Pickup</button>{" "}
          <button onClick={() => setMode("dropoff")}>Drop-off</button>
        </div>
        <div>
          {username} <button onClick={() => alert("Logging out...")}>Logout</button>
        </div>
      </div>

      {/* Floor selector */}
      <div style={{ marginBottom: 10 }}>
        <strong>Select Floor:</strong>
        <div style={{ display: "flex", gap: 10, marginTop: 5 }}>
          {Object.keys(floorMap).map((floor) => (
            <button
              key={floor}
              onClick={() => {
                setSelectedFloor(floor);
                setSelectedShelf(null);
              }}
              style={{
                padding: "0.5rem 1rem",
                backgroundColor: floorColor(floor),
                color: "#fff",
                border: selectedFloor === floor ? "3px solid black" : "none"
              }}
            >
              Floor {floor}
            </button>
          ))}
        </div>
      </div>

      {/* Shelf points for selected floor */}
      {selectedFloor && (
        <div>
          <strong>Select Shelf Point:</strong>
          <div style={{ display: "flex", flexWrap: "wrap", gap: 10, marginTop: 10 }}>
            {floorMap[selectedFloor]?.map((point) => (
              <button
                key={point.id}
                onClick={() => setSelectedShelf(point.id)}
                style={{
                  padding: "0.5rem 1rem",
                  backgroundColor: selectedShelf === point.id ? "#52c41a" : "#f0f0f0",
                  border: selectedShelf === point.id ? "3px solid black" : "1px solid #ccc"
                }}
              >
                {point.id}
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Confirm button */}
      {selectedShelf && (
        <div style={{ marginTop: 20 }}>
          <button
            onClick={handleGo}
            style={{
              padding: "1rem 2rem",
              fontSize: "1rem",
              backgroundColor: "#1890ff",
              color: "#fff",
              border: "none"
            }}
          >
            Confirm Selection
          </button>
        </div>
      )}

      {/* Status */}
      {status && <p style={{ marginTop: 10 }}>{status}</p>}
    </div>
  );
}
‚úÖ 2. Routing (Replit React Style)
In your App.tsx or wherever routing is configured:

tsx
Copy
Edit
import MyTemplate from "./pages/my-template";

// Inside your router config:
<Route path="/my-template" element={<MyTemplate />} />
üîÅ What to Expect
This replaces your existing /my-template screen.

Loads map points from the robot via /api/fetch-points

Auto-groups by floor, colors them, shows shelf selection

User can tap, confirm, and send a full mission via /api/robot-task